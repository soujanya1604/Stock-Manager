@model StockChartViewModel

<h1>Select a Stock Symbol</h1>

<!-- Dropdown for selecting stock symbol -->
<form method="get" action="@Url.Action("GetStockPrice", "Stock")">
    <div class="form-group">
        <label for="symbol">Stock Symbol</label>
        <select id="symbol" name="symbol" class="form-control" asp-items="ViewBag.StockSymbols" required>
            <option value="">-- Select Stock --</option> <!-- Default option -->
        </select>
    </div>
    <button type="submit" class="btn btn-primary">Show Stock Data</button>
</form>

<!-- Button to create a new stock -->
<a href="@Url.Action("Create", "Stock")" class="btn btn-success mt-3">Create New Stock</a>

@if (ViewBag.StockData != null)
{
        <h2>Stock Data for @ViewBag.SelectedSymbol</h2>

        <!-- Display the stock price chart -->
        <div style="width: 60%; margin: 0 auto;">
            <canvas id="stockChart" width="400" height="200"></canvas>
        </div>

        <!-- Display Stock Data in Table Format -->
        <table class="table table-striped table-bordered mt-3">
            <thead>
                <tr>
                    <th>Date</th>
                    <th>Opening Price</th>
                    <th>Closing Price</th>
                    <th>High Price</th>
                    <th>Low Price</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody>
            @foreach (var date in ViewBag.StockData.Dates)
            {
                var dateIndex = Array.IndexOf(ViewBag.StockData.Dates, date);
                var closingPrice = ViewBag.StockData.ClosingPrices[dateIndex];
                var openingPrice = ViewBag.StockData.OpeningPrices[dateIndex];
                var highPrice = ViewBag.StockData.HighPrices[dateIndex];
                var lowPrice = ViewBag.StockData.LowPrices[dateIndex];

                        <tr>
                            <td>@date</td>
                            <td>@openingPrice.ToString("F2")</td>
                            <td>@closingPrice.ToString("F2")</td>
                            <td>@highPrice.ToString("F2")</td>
                            <td>@lowPrice.ToString("F2")</td>
                            <td>
                                <!-- Stylish Edit and Delete Buttons -->
                                <a href="@Url.Action("Edit", "Stock", new { symbol = ViewBag.SelectedSymbol, date = date })" btn-sm" style="background-color: grey;color: white; border-radius: 4px; padding: 5px 10px; text-decoration: none;">
                                    Edit
                                </a>
                                |
                                <a href="@Url.Action("Delete", "Stock", new { symbol = ViewBag.SelectedSymbol, date = date })"  btn-sm" style="background-color: grey; color: white; border-radius: 4px; padding: 5px 10px; text-decoration: none;">
                                    Delete
                                </a>
                            </td>
                        </tr>
            }
            </tbody>
        </table>
}

<!-- Chart.js Canvas Script -->
<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<script>
    var ctx = document.getElementById('stockChart').getContext('2d');
    var stockChart = new Chart(ctx, {
        type: 'line',
        data: {
            labels: @Html.Raw(Json.Serialize(Model.Dates)),
            datasets: [{
                label: '@Model.Symbol Stock Prices',
                data: @Html.Raw(Json.Serialize(Model.ClosingPrices)),
                borderColor: 'rgba(75, 192, 192, 1)',
                backgroundColor: 'rgba(75, 192, 192, 0.2)',
                fill: true,
                tension: 0.1
            }]
        },
        options: {
            responsive: true,
            maintainAspectRatio: false,
            scales: {
                x: { title: { display: true, text: 'Date' } },
                y: { title: { display: true, text: 'Closing Price (USD)' }, ticks: { beginAtZero: false } }
            }
        }
    });
</script>